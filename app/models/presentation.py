from dataclasses import dataclass, field
from typing import Dict, List, Optional, Union
import json
import logging


@dataclass
class Slide:
    title: str
    content: str
    layout: str = 'title'
    image_suggestion: Optional[str] = None
    citation: Optional[str] = None
    points: List[str] = field(default_factory=list)

    def __post_init__(self):
        # If points are provided but content is empty, auto-generate content
        if self.points and not self.content:
            self.content = '\n'.join(f"- {point}" for point in self.points)


@dataclass
class Presentation:
    id: str
    topic: str
    content: Union[str, dict]  # Accepts both string and structured content
    theme: Dict = field(default_factory=lambda: {
        'primary_color': '#2A5CAA',
        'secondary_color': '#5A8F29',
        'font': 'Calibri'
    })
    slides: List[Slide] = field(default_factory=list)
    num_slides: int = 5

    def __post_init__(self):
        try:
            if isinstance(self.content, dict):
                self._parse_structured_content()
            else:
                # Try parsing as JSON if string
                try:
                    content_dict = json.loads(self.content)
                    self._parse_structured_content(content_dict)
                except json.JSONDecodeError:
                    self._parse_plain_text_content()
        except Exception as e:
            logging.error(f"Failed to parse content: {str(e)}")
            self.slides = [Slide(title="Error", content=str(e))]

    def _parse_structured_content(self, content_data: Optional[dict] = None):
        """Parse content when it's in structured format (from _generate_fallback_content)"""
        data = content_data if content_data is not None else self.content
        self.slides = []

        # Title slide
        self.slides.append(Slide(
            title=data.get('title', self.topic),
            content=f"Presentation on {self.topic}",
            layout='title',
            points=data.get('points', [])
        ))

        # Content slides
        for i, slide_data in enumerate(data.get('slides', [])[:self.num_slides - 1]):
            self.slides.append(Slide(
                title=slide_data.get('title', f"{self.topic} - Part {i + 1}"),
                content='\n'.join(slide_data.get('points', [])),
                layout=slide_data.get('layout', 'bullet'),
                image_suggestion=slide_data.get('image_suggestion'),
                citation=slide_data.get('citation'),
                points=slide_data.get('points', [])
            ))

        # Ensure we have at least num_slides
        while len(self.slides) < self.num_slides:
            self.slides.append(Slide(
                title=f"{self.topic} - Additional Content",
                content="More information about this topic",
                layout='bullet'
            ))

        # Add references slide if there's space
        if len(self.slides) < 20:
            self.slides.append(Slide(
                title="References",
                content="Content generated by AI system\nImages should use Creative Commons licenses",
                layout='bullet'
            ))

    def _parse_plain_text_content(self):
        """Original parsing for backward compatibility with plain text"""
        content_parts = self.content.split('\n\n')
        self.slides = []

        # Title slide
        self.slides.append(Slide(
            title=self.topic,
            content=f"Presentation on {self.topic}",
            layout='title'
        ))

        # Content slides
        for i, part in enumerate(content_parts[:self.num_slides - 1]):
            layout = 'bullet'
            if i % 3 == 0:
                layout = 'two_column'
            elif i % 4 == 0:
                layout = 'image'

            self.slides.append(Slide(
                title=f"{self.topic} - Part {i + 1}",
                content=part,
                layout=layout
            ))

    def update_slide_layout(self, slide_number: int, layout: str):
        """Update the layout of a specific slide"""
        if 0 <= slide_number < len(self.slides):
            self.slides[slide_number].layout = layout

    def to_dict(self) -> dict:
        """Convert presentation to dictionary format"""
        return {
            'id': self.id,
            'topic': self.topic,
            'num_slides': self.num_slides,
            'theme': self.theme,
            'slides': [
                {
                    'title': slide.title,
                    'content': slide.content,
                    'layout': slide.layout,
                    'image_suggestion': slide.image_suggestion,
                    'citation': slide.citation,
                    'points': slide.points
                }
                for slide in self.slides
            ]
        }

    def add_slide(self, title: str, content: str, layout: str = 'bullet'):
        """Manually add a new slide"""
        self.slides.append(Slide(
            title=title,
            content=content,
            layout=layout
        ))
        self.num_slides = len(self.slides)