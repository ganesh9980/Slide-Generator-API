import json

import openai
import os

from cachetools import cached, TTLCache

# Configure cache
content_cache = TTLCache(maxsize=100, ttl=3600)


class ContentService:
    def __init__(self):
        openai.api_key = os.getenv("OPENAI_API_KEY")

    @cached(cache=content_cache)
    def generate_content(self, topic: str, num_slides: int = 5) -> dict:
        """
        Returns structured content including images and citations
        """
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": f"""You are an expert presentation creator. Generate JSON output for a {num_slides}-slide presentation about {topic} with:
                        - 1 title slide (include presenter name placeholder)
                        - {num_slides - 2} content slides
                        - 1 reference slide
                        For each content slide provide:
                        - title (max 5 words)
                        - 3-5 concise bullet points
                        - image_suggestion (specific CC0/Public Domain image concept)
                        - citation (APA format academic source)
                        Example format:
                        {{
                            "slides": [
                                {{
                                    "type": "title",
                                    "title": "...",
                                    "subtitle": "..."
                                }},
                                {{
                                    "type": "content",
                                    "title": "...",
                                    "points": ["...", "..."],
                                    "image_suggestion": "...",
                                    "citation": "..."
                                }}
                            ]
                        }}"""
                    }
                ],
                temperature=0.7,
                response_format={"type": "json_object"}
            )
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            return self._generate_fallback_content(topic, num_slides)

    def _generate_fallback_content(self, topic: str, num_slides: int) -> dict:
        """
        Enhanced fallback content with required type field
        """
        if num_slides < 1:
            num_slides = 3  # Minimum slides to generate

        slides = [{
            "type": "title",
            "title": f"Introduction to {topic}",
            "points": [
                f"Basic definition of {topic}",
                f"Importance of {topic}",
                f"Real-world applications"
            ],
            "image_suggestion": f"Conceptual illustration of {topic}",
            "citation": f"Smith, J. (2023). Fundamentals of {topic}. Publisher."
        }]

        # Content slides
        for i in range(1, num_slides - 1):
            slides.append({
                "type": "content",
                "title": f"{topic} - Part {i}",
                "points": [
                    f"Key concept {i} about {topic}",
                    f"Example {i} of {topic} in practice",
                    f"Current research on this aspect"
                ],
                "image_suggestion": f"{topic} application example {i}",
                "citation": f"Researcher, A. (2022). Advances in {topic}. Journal."
            })

        # References slide
        slides.append({
            "type": "references",
            "title": "References",
            "points": [
                "Content generated by AI system",
                "Images should use Creative Commons licenses",
                "Consult academic sources for formal use"
            ],
            "image_suggestion": None,
            "citation": None
        })
        return {"slides": slides}